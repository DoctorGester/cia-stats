extends base.jade

block append head
    script(type="text/javascript", src="/scripts/angular.min.js")
    script(type="text/javascript", src="/scripts/angular-sanitize.js")
    script(type="text/javascript", src="/scripts/angular-route.js")
    script(type="text/javascript", src="/scripts/highcharts.js")
    script(type="text/javascript", src="/scripts/highcharts-ng.min.js")
    base(href="/")
    block title
        title Crumbling Island Arena | Heroes

block content
    style.
        #heroList {
            display: flex;
            flex-direction: row;
            flex-wrap: wrap;
            justify-content: center;
        }

        #heroList > a {
            margin: 8px 8px 0 8px;
            object-fit: scale-down;
        }

        #heroList > a img {
            border-radius: 3px;
        }

        @media (max-width: 1024px) {
            #heroList > img {
                max-width: 96px;
            }
        }

        #heroDetails .hero-top-players {
            display: flex;
            flex-direction: row;
            justify-content: center;
            border: 1px solid #eee;
            border-radius: 4px;
        }

        #heroDetails .hero-top-players .player-column {
            display: flex;
            flex-direction: column;
            margin: 30px;
        }

        #heroDetails .hero-top-players .player-column > * {
            margin: 6px auto 6px auto;
        }

        #heroDetails .hero-top-players .player-column > .no-line-height {
            line-height: normal;
        }

        #heroDetails .ability img {
            border-radius: 3px;
            width: 64px;
            height: 64px;
        }

        #heroDetails .ability span {
            align-self: center;
        }

        #heroDetails .hero-right .description {
            margin-left: 16px;
            font-family: "Open Sans", sans-serif;
        }

        #heroDetails .hero-right .attack-ability {
            margin-left: 16px;
            font-family: "Open Sans", sans-serif;
            text-transform: uppercase;
            font-size: 18px;
            color: steelblue;
        }

        #heroDetails .hero-right .abilities {
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        #heroDetails .hero-right .abilities .ability-block {
            display: flex;
            flex-direction: column;
            margin: 4px;
            border: 1px solid #eee;
            padding: 12px;
            border-radius: 3px;
        }

        #heroDetails .hero-right .abilities .ability {
            display: flex;
            flex-direction: row;
            margin: 4px;
        }

        #heroDetails .hero-right .abilities .ability .image-block {
            display: flex;
            flex-direction: column;
            position: relative;
            width: 64px;
            height: 64px;
            margin-right: 4px;
            align-self: center;
        }

        #heroDetails .hero-right .abilities .ability .image-block .image {
            position: relative;
        }

        #heroDetails .hero-right .abilities .ability .image-block .cooldown-text {
            position: absolute;
            color: white;
            background-color: #2d2d29;
            text-align: center;
            border-radius: 4px;
            left: 100%;
            top: 100%;
            transform: translate(-80%, -80%);
            padding-left: 5px;
            padding-right: 5px;
        }

        #heroDetails .hero-right .abilities .ability .image-block .damage-text {
            position: absolute;
            color: white;
            background-color: #da2715;
            text-align: center;
            border-radius: 4px;
            right: 100%;
            top: 100%;
            transform: translate(80%, -80%);
            padding-left: 5px;
            padding-right: 5px;
        }

        #heroDetails .hero-right .abilities .sub {
            background-color: antiquewhite;
            border-radius: 3px;
        }

        #heroDetails {
            display: flex;
            flex-direction: column;
            line-height: 1.4em;
        }

        #heroDetails .hero-top {
            align-content: center;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        #heroDetails .hero-top img {
            border-radius: 4px;
        }

        #heroDetails .hero-top .name {
            margin-top: 24px;
            margin-bottom: 40px;
            font-size: 32px;
            text-transform: uppercase;
            font-family: "Raleway", "Open Sans", sans-serif;
            letter-spacing: 2px;
        }

        #heroDetails .hero-bar {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
            margin-bottom: 20px;
        }

        #heroDetails .hero-bar a {
            font-size: 28px;
            font-family: "Raleway", sans-serif;
            letter-spacing: 2px;
            text-transform: uppercase;
        }

        #heroDetails .hero-bar > a {
            display: flex;
            justify-content: center;
            flex-direction: column;
        }

        #heroDetails .hero-stats {
            margin-top: 40px;
        }

        .language-selector {
            display: flex;
        }

        .language-selector > a {
            margin: 10px;
            cursor: pointer;
        }

    #app(ng-app="app")
        #main(ng-cloak)
            ng-view
    script.

        function getLang() {
            if (navigator.languages != undefined)
                return navigator.languages[0] || "";
            else
                return navigator.language || "";
        }

        var model = [];

        var app = angular.module('app', [ "ngSanitize", "ngRoute", "highcharts-ng" ]);

        app.config(function($routeProvider, $locationProvider) {
            $routeProvider.when("/heroes/:hero", {
                templateUrl: "/templates/hero.html",
                controller: "HeroDetailsCtrl"
            });

            $routeProvider.when("/heroes", {
                templateUrl: "/templates/heroList.html",
                controller: "HeroListCtrl"
            });

            $locationProvider.html5Mode(true);
        });

        app.controller("HeroListCtrl", function($scope, $http) {
            $http.get("/api/heroes/list", { async: true })
                .success(function (response) {
                    $scope.heroes = response;
                });
        });

        app.controller("HeroDetailsCtrl", function ($scope, $http, $filter, $routeParams) {
            $scope.heroName = $routeParams.hero;

            $http.get("/api/heroes/details/" + $scope.heroName, { async: true })
                .success(function(response) {
                    $scope.hero = response;
                });

            var tokens = {};

            $http.get("/api/heroes/localization", { async: true })
                .success(function (response) {
                    $scope.tokens = response.Tokens;
                });

            //kvToObject("#{model.localization}").addon.Tokens;
            //var tokensRU = kvToObject("#{model.localizationRU}").addon.Tokens;

            $scope.tokens = tokens;

            $scope.getAbilityImage = function (ability) {
                var template = "http://cdn.dota2.com/apps/dota2/images/abilities/%s_hp1.png";

                if (ability.customIcon) {
                    template = "https://github.com/DoctorGester/crumbling-island-arena/blob/master/content/panorama/images/custom_game/%s?raw=true";
                }

                return template.replace(/%s/, ability.texture);
            };

            $scope.getAbilityDescription = function (ability) {
                var token = $scope.tokens['AbilityTooltip_' + ability.name];

                if (!token) {
                    return "";
                }

                return token.replace(/\\"/g, "\"").replace(/\\\\\\\\/g, "");
            };

            $scope.isAttackAbility = function (ability) {
                return ability.name.endsWith("_a");
            };

            $scope.not = function (func) {
                return function (item) {
                    return !func(item);
                }
            };

            $scope.winrateConfig = {
                loading: true,
                options: {
                    chart: { type: "line" },
                    tooltip: {
                        formatter: function () {
                            return this.y.toFixed(1) + ' % across ' + this.point.games + ' games';
                        }
                    },
                    legend: { enabled: false }
                },
                title: { text: "Winrate" },
                xAxis: {
                    type: 'datetime',
                    title: { text: 'Date' }
                },
                yAxis: { min: 25, max: 75 }
            };

            var loadHeroWinRates = function (hero) {
                $scope.winrateConfig.loading = true;

                $http.get("/stats/" + hero, { async: true })
                    .success(function (response) {
                        var seriesResult = [];
                        var perDay = response.heroWinRatePerDate;

                        angular.forEach(perDay, function (value, key) {
                            seriesResult.push({x: new Date(key), y: value.winRate * 100, games: value.games})
                        }, seriesResult);

                        seriesResult = $filter('orderBy')(seriesResult, "'x'");

                        $scope.winrateConfig.series = [{data: seriesResult}];
                        $scope.winrateConfig.loading = false;
                        $scope.winratePerPlayer = response.heroWinRatePerPlayer;

                        angular.forEach($scope.winratePerPlayer, function (value) {
                            value.winRate = parseFloat(Math.round(value.winRateAndGames.winRate * 100)).toFixed(1);
                        });
                    });
            };

            loadHeroWinRates($scope.heroName);
        });