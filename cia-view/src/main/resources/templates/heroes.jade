extends /base.jade

block append head
    script(type="text/javascript", src="https://ajax.googleapis.com/ajax/libs/angularjs/1.5.8/angular.min.js")
    script(type="text/javascript", src="https://ajax.googleapis.com/ajax/libs/angularjs/1.5.8/angular-sanitize.js")
    script(type="text/javascript", src="https://ajax.googleapis.com/ajax/libs/angularjs/1.5.8/angular-route.js")
    link(href="https://fonts.googleapis.com/css?family=Raleway", rel="stylesheet")

block content
    style.
        #heroList {
            display: flex;
            flex-direction: row;
            flex-wrap: wrap;
            justify-content: center;
        }

        #heroList > img {
            margin: 10px;
            border-radius: 3px;
        }

        .hero .image {
            max-width: 128px;
            border-radius: 3px;
        }

        #heroDetails .ability img {
            border-radius: 3px;
            width: 64px;
            height: 64px;
        }

        #heroDetails .ability span {
            align-self: center;
        }

        #heroDetails .hero-right .description {
            margin-left: 10px;
        }

        #heroDetails .hero-right .abilities {
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        #heroDetails .hero-right .abilities .ability {
            display: flex;
            flex-direction: row;
            margin: 4px;
            border: 1px solid #eee;
            padding: 12px;
            border-radius: 3px;
        }

        #heroDetails .hero-right .abilities .ability .image {
            margin-right: 4px;
            align-self: center;
        }

        #heroDetails {
            display: flex;
            flex-direction: column;
            line-height: 1.4em;
        }

        #heroDetails .hero-top {
            align-content: center;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        #heroDetails .hero-top img {
            border-radius: 4px;
        }

        #heroDetails .hero-top .name {
            margin-top: 24px;
            margin-bottom: 40px;
            font-size: 32px;
            text-transform: uppercase;
            font-family: "Raleway", sans-serif;
            letter-spacing: 2px;
        }

    #app(ng-app="app")
        #main(ng-controller="HeroesCtrl")
            #heroList(ng-show="!selectedHero")
                img(ng-repeat="hero in heroes" ng-src="http://cdn.dota2.com/apps/dota2/images/heroes/{{hero.name}}_hphover.png" ng-click="selectHero(hero)")
            #heroDetails(ng-show="selectedHero")
                .hero-top
                    img(ng-src="http://cdn.dota2.com/apps/dota2/images/heroes/{{selectedHero.name}}_full.png" ng-click="selectHero()")
                    .name {{tokens['HeroName_npc_dota_hero_' + selectedHero.name]}}
                .hero-right
                    .abilities
                        .ability(ng-repeat="ability in abilities")
                            img.image(ng-src="http://cdn.dota2.com/apps/dota2/images/abilities/{{ability.image}}_hp1.png")
                            img.sub-image(ng-if="ability.subImage" ng-src="http://cdn.dota2.com/apps/dota2/images/abilities/{{ability.subImage}}_hp1.png")
                            span.description(ng-bind-html="tokens['AbilityTooltip_' + ability.name]")
                            span(ng-if="ability.subImage") /
                            span(ng-if="ability.subImage" ng-bind-html="tokens['AbilityTooltip_' + ability.subName]")
    script.
        function parseKV(string, targetObject) {
            var index = 0;
            var state = 0;
            var buffer = "";
            var lastKey = null;
            var prevToken = null;

            while (index < string.length) {
                var token = string.charAt(index);

                if (token == "}" && state != 1 && state != 3) {
                    return index;
                }

                if (token == "\"" && prevToken != "\\") {
                    if (state == 0) {
                        state = 1;
                    } else if (state == 1) {
                        state = 2;
                        lastKey = buffer;
                        buffer = "";
                    } else if (state == 2) {
                        state = 3;
                    } else if (state == 3) {
                        targetObject[lastKey] = buffer;
                        buffer = "";
                        state = 0;
                    }
                } else if (token == "{" && state == 2) {
                    var internal = {};
                    index += parseKV(string.substring(index), internal);
                    targetObject[lastKey] = internal;
                    state = 0;
                } else if (state == 1 || state == 3) {
                    buffer = buffer + token;
                }

                prevToken = token;
                index++;
            }

            return index;
        }

        function kvToObject(base64) {
            var obj = {};
            parseKV(atob(base64), obj);
            return obj;
        }

        var model = [];

        var app = angular.module('app', [ "ngSanitize", "ngRoute" ]);

        app.controller('HeroesCtrl', function ($scope) {
            var heroes = kvToObject("#{model.heroes}").DOTAHeroes;
            heroes = Object.keys(heroes).filter(function(key) {
                var hero = heroes[key];
                return (!hero.Disabled || hero.Disabled == "false") && hero.Order;
            }).map(function (key) {
                return heroes[key];
            });

            heroes.forEach(function(hero) {
                hero.name = hero.override_hero.substr('npc_dota_hero_'.length);
            });

            $scope.tokens = kvToObject("#{model.localization}").addon.Tokens;
            $scope.heroes = heroes;

            var allAbilities = kvToObject("#{model.abilities}").DOTAAbilities;

            $scope.selectHero = function(hero) {
                $scope.selectedHero = hero;

                if (!hero) {
                    return;
                }

                var abilities = [];

                for (var i = 1; i < 10; i++) {
                    var abilityName = hero["Ability" + i];

                    if (!abilityName) {
                        continue;
                    }

                    var originalName = abilityName;
                    var ability = allAbilities[abilityName];
                    var isSub = false;

                    if (abilityName.startsWith("placeholder")) {
                        continue;
                    }

                    if (abilityName.endsWith("_sub")) {
                        isSub = true;
                        abilityName = abilityName.substr(0, abilityName.length - "_sub".length);
                    }

                    if (ability) {
                        var abilityModel = {};

                        var found = false;

                        abilities.forEach(function (value) {
                            if (value.name == abilityName) {
                                found = true;
                                abilityModel = value;
                                return false;
                            }
                        });

                        if (!isSub) {
                            abilityModel.image = ability.AbilityTextureName;
                            abilityModel.name = abilityName;
                        } else {
                            abilityModel.subImage = ability.AbilityTextureName;
                            abilityModel.subName = originalName;
                        }

                        if (!found) {
                            abilities.push(abilityModel);
                        }
                    } else {
                        console.log(abilityName + " not found");
                    }
                }

                $scope.abilities = abilities;
            };

            console.log($scope.heroes)
        });